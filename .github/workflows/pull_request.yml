# yamllint disable rule:comments-indentation
name: PullRequestCI

env:
  # Force the stdout and stderr streams to be unbuffered
  PYTHONUNBUFFERED: 1
  S3_CI_REPORTS: 'clickhouse-builds/CI_data'

on:  # yamllint disable-line rule:truthy
  pull_request:
    types:
      - synchronize
      - reopened
      - opened
    branches:
      - master
    paths-ignore:
      - '**.md'
      - 'docker/docs/**'
      - 'docs/**'
      - 'utils/check-style/aspell-ignore/**'
      - 'tests/ci/docs_check.py'
      - '.github/workflows/docs_check.yml'
##########################################################################################
##################################### SMALL CHECKS #######################################
##########################################################################################
jobs:
  # CheckLabels:
  #   runs-on: [self-hosted, style-checker]
  #   # Run the first check always, even if the CI is cancelled
  #   if: ${{ always() }}
  #   steps:
  #     - name: Check out repository code
  #       uses: ClickHouse/checkout@v1
  #       with:
  #         clear-repository: true
  #     - name: Labels check
  #       run: |
  #         cd "$GITHUB_WORKSPACE/tests/ci"
  #         python3 run_check.py
  ToDoList:
    runs-on: [self-hosted] # it is fast - run on any available runner
    outputs:
      data: ${{ steps.todo.outputs.CI_DATA }}
    steps:
      - name: Check out repository code
        uses: ClickHouse/checkout@v1
        with:
          clear-repository: true # to ensure correct digests
          ref: ${{ github.event.after }} # no merge commit
      # - name: CI python unit tests
      #   run: |
      #     cd "$GITHUB_WORKSPACE/tests/ci"
      #     echo "Testing the main ci directory"
      #     python3 -m unittest discover -s . -p '*_test.py'
      #     for dir in *_lambda/; do
      #       echo "Testing $dir"
      #       python3 -m unittest discover -s "$dir" -p '*_test.py'
      #     done
      - name: PrepareToDoList
        id: todo
        run: |
            # Check docker images:
            # FIXME: login to dockerhub?
            aws ssm get-parameter --region us-east-1 --name dockerhub_robot_password --query 'Parameter.Value' --output=text --with-decryption \
            | docker login --username robotclickhouse --password-stdin
            python3 "$GITHUB_WORKSPACE/tests/ci/ci.py" --configure --outfile ${{ runner.temp }}/ci_run_data.json
            # pretty printing
            echo "=== CI run config ==="
            python3 -m json.tool ${{ runner.temp }}/ci_run_data.json
            {
              echo 'CI_DATA<<EOF'
              cat  ${{ runner.temp }}/ci_run_data.json
              echo 'EOF'
            } >> "$GITHUB_OUTPUT"
  BuildDockers:
    needs: [ToDoList]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_docker.yml
    with:
      data: ${{ needs.ToDoList.outputs.data }}
  StyleCheck:
    needs: [ToDoList, BuildDockers]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: Style check
      runner_type: style-checker
      run_command: |
          python3 style_check.py
      data: ${{ needs.ToDoList.outputs.data }}
    secrets:
      secret_envs: |
        ROBOT_CLICKHOUSE_SSH_KEY<<RCSK
        ${{secrets.ROBOT_CLICKHOUSE_SSH_KEY}}
        RCSK
  DocsCheck:
    needs: [ToDoList, StyleCheck]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: Docs check
      runner_type: func-tester-aarch64
      data: ${{ needs.ToDoList.outputs.data }}
      run_command: |
        python3 docs_check.py
  FastTest:
    needs: [ToDoList, StyleCheck]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: Fast tests
      runner_type: builder
      data: ${{ needs.ToDoList.outputs.data }}
      run_command: |
          python3 fast_test_check.py
  CompatibilityCheckX86:
    needs: [ToDoList, BuilderDebRelease]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: Compatibility check X86
      runner_type: style-checker
      data: ${{ needs.ToDoList.outputs.data }}
      run_command: |
        python3 compatibility_check.py --check-name "Compatibility check (amd64)" --check-glibc --check-distributions
  CompatibilityCheckAarch64:
    needs: [ToDoList, BuilderDebAarch64]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: Compatibility check (aarch64)
      runner_type: style-checker
      data: ${{ needs.ToDoList.outputs.data }}
      run_command: |
        python3 compatibility_check.py --check-name "Compatibility check (aarch64)" --check-glibc
#########################################################################################
#################################### ORDINARY BUILDS ####################################
#########################################################################################
  BuilderDebRelease:
    needs: [ToDoList, FastTest]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_build.yml
    with:
      build_name: package_release
      # FIXME: should be 1 everywhere!!!!
      checkout_depth: 0
      data: ${{ needs.ToDoList.outputs.data }}
  BuilderDebAarch64:
    needs: [ToDoList, BuilderDebRelease]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_build.yml
    with:
      build_name: package_aarch64
      # FIXME: should be 1 everywhere!!!!
      checkout_depth: 0
      data: ${{ needs.ToDoList.outputs.data }}
  BuilderBinRelease:
    needs: [ToDoList, BuilderDebRelease]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_build.yml
    with:
      build_name: binary_release
      data: ${{ needs.ToDoList.outputs.data }}
  BuilderDebAsan:
    needs: [ToDoList, BuilderDebRelease]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_build.yml
    with:
      build_name: package_asan
      data: ${{ needs.ToDoList.outputs.data }}
  BuilderDebUBsan:
    needs: [ToDoList, BuilderDebRelease]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_build.yml
    with:
      build_name: package_ubsan
      data: ${{ needs.ToDoList.outputs.data }}
  BuilderDebTsan:
    needs: [ToDoList, BuilderDebRelease]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_build.yml
    with:
      build_name: package_tsan
      data: ${{ needs.ToDoList.outputs.data }}
  BuilderDebMsan:
    needs: [ToDoList, BuilderDebRelease]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_build.yml
    with:
      build_name: package_msan
      data: ${{ needs.ToDoList.outputs.data }}
  BuilderDebDebug:
    needs: [ToDoList, BuilderDebRelease]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_build.yml
    with:
      build_name: package_debug
      data: ${{ needs.ToDoList.outputs.data }}
# ##########################################################################################
# ##################################### SPECIAL BUILDS #####################################
# ##########################################################################################
#   BuilderBinClangTidy:
#     needs: [FastTest, StyleCheck]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/reusable_build.yml
#     with:
#       build_name: binary_tidy
#   BuilderBinDarwin:
#     needs: [FastTest, StyleCheck]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/reusable_build.yml
#     with:
#       build_name: binary_darwin
  BuilderBinAarch64:
    needs: [ToDoList, BuilderDebRelease]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_build.yml
    with:
      build_name: binary_aarch64
      data: ${{ needs.ToDoList.outputs.data }}
#   BuilderBinFreeBSD:
#     needs: [FastTest, StyleCheck]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/reusable_build.yml
#     with:
#       build_name: binary_freebsd
#   BuilderBinDarwinAarch64:
#     needs: [FastTest, StyleCheck]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/reusable_build.yml
#     with:
#       build_name: binary_darwin_aarch64
#   BuilderBinPPC64:
#     needs: [FastTest, StyleCheck]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/reusable_build.yml
#     with:
#       build_name: binary_ppc64le
#   BuilderBinAmd64Compat:
#     needs: [FastTest, StyleCheck]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/reusable_build.yml
#     with:
#       build_name: binary_amd64_compat
#   BuilderBinAarch64V80Compat:
#     needs: [FastTest, StyleCheck]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/reusable_build.yml
#     with:
#       build_name: binary_aarch64_v80compat
#   BuilderBinRISCV64:
#     needs: [FastTest, StyleCheck]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/reusable_build.yml
#     with:
#       build_name: binary_riscv64
#   BuilderBinS390X:
#     needs: [FastTest, StyleCheck]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/reusable_build.yml
#     with:
#       build_name: binary_s390x
############################################################################################
##################################### BUILD REPORTER #######################################
############################################################################################
  BuilderReport:
    needs:
      - ToDoList
      - BuilderBinRelease
      - BuilderDebAarch64
      - BuilderDebAsan
      - BuilderDebDebug
      - BuilderDebMsan
      - BuilderDebRelease
      - BuilderDebTsan
      - BuilderDebUBsan
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: ClickHouse build check
      runner_type: style-checker
      data: ${{ needs.ToDoList.outputs.data }}
      additional_envs: |
        NEEDS_DATA<<NDENV
        ${{ toJSON(needs) }}
        NDENV
      run_command: |
        cd "$GITHUB_WORKSPACE/tests/ci"
        python3 build_report_check.py "$CHECK_NAME"
  BuilderSpecialReport:
    if: ${{ !failure() && !cancelled() }}
    needs:
      - ToDoList
      - BuilderBinAarch64
      # - BuilderBinDarwin
      # - BuilderBinDarwinAarch64
      # - BuilderBinFreeBSD
      # - BuilderBinPPC64
      # - BuilderBinRISCV64
      # - BuilderBinS390X
      # - BuilderBinAmd64Compat
      # - BuilderBinAarch64V80Compat
      # - BuilderBinClangTidy
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: ClickHouse special build check
      runner_type: style-checker
      data: ${{ needs.ToDoList.outputs.data }}
      additional_envs: |
        NEEDS_DATA<<NDENV
        ${{ toJSON(needs) }}
        NDENV
      run_command: |
        cd "$GITHUB_WORKSPACE/tests/ci"
        python3 build_report_check.py "$CHECK_NAME"
############################################################################################
#################################### INSTALL PACKAGES ######################################
############################################################################################
  InstallPackagesTestRelease:
    needs: [ToDoList, BuilderDebRelease]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: Install packages (amd64)
      runner_type: style-checker
      data: ${{ needs.ToDoList.outputs.data }}
      run_command: |
        python3 install_check.py "$CHECK_NAME"
  InstallPackagesTestAarch64:
    needs: [ToDoList, BuilderDebAarch64]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: Install packages (arm64)
      runner_type: style-checker-aarch64
      data: ${{ needs.ToDoList.outputs.data }}
      run_command: |
        python3 install_check.py "$CHECK_NAME"
##############################################################################################
########################### FUNCTIONAl STATELESS TESTS #######################################
##############################################################################################
  FunctionalStatelessTestRelease:
    needs: [ToDoList, BuilderDebRelease]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: Stateless tests (release)
      runner_type: func-tester
      data: ${{ needs.ToDoList.outputs.data }}
  FunctionalStatelessTestReleaseDatabaseReplicated:
    needs: [ToDoList, BuilderDebRelease]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: Stateless tests (release, DatabaseReplicated)
      runner_type: func-tester
      data: ${{ needs.ToDoList.outputs.data }}
  FunctionalStatelessTestReleaseWideParts:
    needs: [ToDoList, BuilderDebRelease]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: Stateless tests (release, wide parts enabled)
      runner_type: func-tester
      data: ${{ needs.ToDoList.outputs.data }}
  FunctionalStatelessTestReleaseAnalyzer:
    needs: [ToDoList, BuilderDebRelease]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: Stateless tests (release, analyzer)
      runner_type: func-tester
      data: ${{ needs.ToDoList.outputs.data }}
  FunctionalStatelessTestReleaseS3:
    needs: [ToDoList, BuilderDebRelease]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: Stateless tests (release, s3 storage)
      runner_type: func-tester
      data: ${{ needs.ToDoList.outputs.data }}
  FunctionalStatelessTestS3Debug:
    needs: [ToDoList, BuilderDebDebug]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: Stateless tests (debug, s3 storage)
      runner_type: func-tester
      data: ${{ needs.ToDoList.outputs.data }}
  FunctionalStatelessTestS3Tsan:
    needs: [ToDoList, BuilderDebTsan]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: Stateless tests (tsan, s3 storage)
      runner_type: func-tester
      data: ${{ needs.ToDoList.outputs.data }}
  FunctionalStatelessTestAarch64:
    needs: [ToDoList, BuilderDebAarch64]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: Stateless tests (aarch64)
      runner_type: func-tester-aarch64
      data: ${{ needs.ToDoList.outputs.data }}
  FunctionalStatelessTestAsan:
    needs: [ToDoList, BuilderDebAsan]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: Stateless tests (asan)
      runner_type: func-tester
      data: ${{ needs.ToDoList.outputs.data }}
  # FunctionalStatelessTestTsan:
  #   needs: [BuilderDebTsan]
  #   uses: ./.github/workflows/reusable_test.yml
  #   with:
  #     test_name: Stateless tests (tsan)
  #     runner_type: func-tester
  #     data: ${{ needs.ToDoList.outputs.data }}
  # FunctionalStatelessTestMsan:
  #   needs: [BuilderDebMsan]
  #   uses: ./.github/workflows/reusable_test.yml
  #   with:
  #     test_name: Stateless tests (msan)
  #     runner_type: func-tester
  #     additional_envs: |
  #       KILL_TIMEOUT=10800
  #     batches: 6
  #     run_command: |
  #       python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
  # FunctionalStatelessTestUBsan:
  #   needs: [BuilderDebUBsan]
  #   uses: ./.github/workflows/reusable_test.yml
  #   with:
  #     test_name: Stateless tests (ubsan)
  #     runner_type: func-tester
  #     additional_envs: |
  #       KILL_TIMEOUT=10800
  #     batches: 2
  #     run_command: |
  #       python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
  # FunctionalStatelessTestDebug:
  #   needs: [BuilderDebDebug]
  #   uses: ./.github/workflows/reusable_test.yml
  #   with:
  #     test_name: Stateless tests (debug)
  #     runner_type: func-tester
  #     data: ${{ needs.ToDoList.outputs.data }}
  # FunctionalStatelessTestFlakyCheck:
  #   needs: [BuilderDebAsan]
  #   uses: ./.github/workflows/reusable_test.yml
  #   with:
  #     test_name: Stateless tests flaky check (asan)
  #     runner_type: func-tester
  #     additional_envs: |
  #       KILL_TIMEOUT=3600
  #     run_command: |
  #       python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
  # TestsBugfixCheck:
  #   needs: [CheckLabels, StyleCheck]
  #   uses: ./.github/workflows/reusable_test.yml
  #   with:
  #     test_name: tests bugfix validate check
  #     runner_type: func-tester
  #     additional_envs: |
  #       KILL_TIMEOUT=3600
  #     run_command: |

  #       TEMP_PATH="${TEMP_PATH}/integration" \
  #         REPORTS_PATH="${REPORTS_PATH}/integration" \
  #         python3 integration_test_check.py "Integration $CHECK_NAME" \
  #           --validate-bugfix --post-commit-status=file || echo 'ignore exit code'

  #       TEMP_PATH="${TEMP_PATH}/stateless" \
  #         REPORTS_PATH="${REPORTS_PATH}/stateless" \
  #         python3 functional_test_check.py "Stateless $CHECK_NAME" "$KILL_TIMEOUT" \
  #           --validate-bugfix --post-commit-status=file || echo 'ignore exit code'

  #       python3 bugfix_validate_check.py "${TEMP_PATH}/stateless/functional_commit_status.tsv" "${TEMP_PATH}/integration/integration_commit_status.tsv"
##############################################################################################
############################ FUNCTIONAl STATEFUL TESTS #######################################
##############################################################################################
  FunctionalStatefulTestRelease:
    needs: [ToDoList, BuilderDebRelease]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: Stateful tests (release)
      runner_type: func-tester
      data: ${{ needs.ToDoList.outputs.data }}
  FunctionalStatefulTestAarch64:
    needs: [ToDoList, BuilderDebAarch64]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: Stateful tests (aarch64)
      runner_type: func-tester-aarch64
      data: ${{ needs.ToDoList.outputs.data }}
#   FunctionalStatefulTestAsan:
#     needs: [ToDoList, BuilderDebAsan]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/reusable_test.yml
#     with:
#       test_name: Stateful tests (asan)
#       runner_type: func-tester
#       data: ${{ needs.ToDoList.outputs.data }}
#   FunctionalStatefulTestTsan:
#     needs: [ToDoList, BuilderDebTsan]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/reusable_test.yml
#     with:
#       test_name: Stateful tests (tsan)
#       runner_type: func-tester
#       data: ${{ needs.ToDoList.outputs.data }}
#   FunctionalStatefulTestMsan:
#     needs: [ToDoList, BuilderDebMsan]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/reusable_test.yml
#     with:
#       test_name: Stateful tests (msan)
#       runner_type: func-tester
#       data: ${{ needs.ToDoList.outputs.data }}
#   FunctionalStatefulTestUBsan:
#     needs: [ToDoList, BuilderDebUBsan]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/reusable_test.yml
#     with:
#       test_name: Stateful tests (ubsan)
#       runner_type: func-tester
#       data: ${{ needs.ToDoList.outputs.data }}
#   FunctionalStatefulTestDebug:
#     needs: [ToDoList, BuilderDebDebug]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/reusable_test.yml
#     with:
#       test_name: Stateful tests (debug)
#       runner_type: func-tester
#       data: ${{ needs.ToDoList.outputs.data }}
#   # Parallel replicas
#   FunctionalStatefulTestDebugParallelReplicas:
#     needs: [ToDoList, BuilderDebDebug]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/reusable_test.yml
#     with:
#       test_name: Stateful tests (debug, ParallelReplicas)
#       runner_type: func-tester
#       data: ${{ needs.ToDoList.outputs.data }}
#   FunctionalStatefulTestUBsanParallelReplicas:
#     needs: [ToDoList, BuilderDebUBsan]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/reusable_test.yml
#     with:
#       test_name: Stateful tests (ubsan, ParallelReplicas)
#       runner_type: func-tester
#       data: ${{ needs.ToDoList.outputs.data }}
#   FunctionalStatefulTestMsanParallelReplicas:
#     needs: [ToDoList, BuilderDebMsan]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/reusable_test.yml
#     with:
#       test_name: Stateful tests (msan, ParallelReplicas)
#       runner_type: func-tester
#       data: ${{ needs.ToDoList.outputs.data }}
#   FunctionalStatefulTestTsanParallelReplicas:
#     needs: [ToDoList, BuilderDebTsan]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/reusable_test.yml
#     with:
#       test_name: Stateful tests (tsan, ParallelReplicas)
#       runner_type: func-tester
#       data: ${{ needs.ToDoList.outputs.data }}
#   FunctionalStatefulTestAsanParallelReplicas:
#     needs: [ToDoList, BuilderDebAsan]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/reusable_test.yml
#     with:
#       test_name: Stateful tests (asan, ParallelReplicas)
#       runner_type: func-tester
#       data: ${{ needs.ToDoList.outputs.data }}
#   FunctionalStatefulTestReleaseParallelReplicas:
#     needs: [ToDoList, BuilderDebRelease]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/reusable_test.yml
#     with:
#       test_name: Stateful tests (release, ParallelReplicas)
#       runner_type: func-tester
#       data: ${{ needs.ToDoList.outputs.data }}
##############################################################################################
######################################### STRESS TESTS #######################################
##############################################################################################
  StressTestAsan:
    needs: [ToDoList, BuilderDebAsan]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: Stress test (asan)
      runner_type: stress-tester
      data: ${{ needs.ToDoList.outputs.data }}
  StressTestTsan:
    needs: [ToDoList, BuilderDebTsan]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: Stress test (tsan)
      runner_type: stress-tester
      data: ${{ needs.ToDoList.outputs.data }}
#   StressTestMsan:
#     needs: [ToDoList, BuilderDebMsan]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/reusable_test.yml
#     with:
#       test_name: Stress test (msan)
#       runner_type: stress-tester
#       data: ${{ needs.ToDoList.outputs.data }}
#   StressTestUBsan:
#     needs: [ToDoList, BuilderDebUBsan]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/reusable_test.yml
#     with:
#       test_name: Stress test (ubsan)
#       runner_type: stress-tester
#       data: ${{ needs.ToDoList.outputs.data }}
#   StressTestDebug:
#     needs: [ToDoList, BuilderDebDebug]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/reusable_test.yml
#     with:
#       test_name: Stress test (debug)
#       runner_type: stress-tester
#       data: ${{ needs.ToDoList.outputs.data }}
# ##############################################################################################
# ######################################### UPGRADE CHECK ######################################
# ##############################################################################################
#   UpgradeCheckAsan:
#     needs: [ToDoList, BuilderDebAsan]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/reusable_test.yml
#     with:
#       test_name: Upgrade check (asan)
#       runner_type: stress-tester
#       data: ${{ needs.ToDoList.outputs.data }}
#   UpgradeCheckTsan:
#     needs: [ToDoList, BuilderDebTsan]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/reusable_test.yml
#     with:
#       test_name: Upgrade check (tsan)
#       runner_type: stress-tester
#       data: ${{ needs.ToDoList.outputs.data }}
  UpgradeCheckMsan:
    needs: [ToDoList, BuilderDebMsan]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: Upgrade check (msan)
      runner_type: stress-tester
      data: ${{ needs.ToDoList.outputs.data }}
  UpgradeCheckDebug:
    needs: [ToDoList, BuilderDebDebug]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: Upgrade check (debug)
      runner_type: stress-tester
      data: ${{ needs.ToDoList.outputs.data }}
# ##############################################################################################
# ##################################### AST FUZZERS ############################################
# ##############################################################################################
#   ASTFuzzerTestAsan:
#     needs: [ToDoList, BuilderDebAsan]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/reusable_test.yml
#     with:
#       test_name: AST fuzzer (asan)
#       runner_type: fuzzer-unit-tester
#       data: ${{ needs.ToDoList.outputs.data }}
  ASTFuzzerTestTsan:
    needs: [ToDoList, BuilderDebTsan]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: AST fuzzer (tsan)
      runner_type: fuzzer-unit-tester
      data: ${{ needs.ToDoList.outputs.data }}
  ASTFuzzerTestUBSan:
    needs: [ToDoList, BuilderDebUBsan]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: AST fuzzer (ubsan)
      runner_type: fuzzer-unit-tester
      data: ${{ needs.ToDoList.outputs.data }}
#   ASTFuzzerTestMSan:
#     needs: [ToDoList, BuilderDebMsan]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/reusable_test.yml
#     with:
#       test_name: AST fuzzer (msan)
#       runner_type: fuzzer-unit-tester
#       data: ${{ needs.ToDoList.outputs.data }}
#   ASTFuzzerTestDebug:
#     needs: [ToDoList, BuilderDebDebug]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/reusable_test.yml
#     with:
#       test_name: AST fuzzer (debug)
#       runner_type: fuzzer-unit-tester
#       data: ${{ needs.ToDoList.outputs.data }}
#############################################################################################
############################# INTEGRATION TESTS #############################################
#############################################################################################
  IntegrationTestsAsan:
    needs: [ToDoList, BuilderDebAsan]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: Integration tests (asan)
      runner_type: stress-tester
      data: ${{ needs.ToDoList.outputs.data }}
  IntegrationTestsAnalyzerAsan:
    needs: [ToDoList, BuilderDebAsan]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: Integration tests (asan, analyzer)
      runner_type: stress-tester
      data: ${{ needs.ToDoList.outputs.data }}
#   IntegrationTestsTsan:
#     needs: [ToDoList, BuilderDebTsan]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/reusable_test.yml
#     with:
#       test_name: Integration tests (tsan)
#       runner_type: stress-tester
#       batches: 6
#       data: ${{ needs.ToDoList.outputs.data }}
#   IntegrationTestsRelease:
#     needs: [ToDoList, BuilderDebRelease]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/reusable_test.yml
#     with:
#       test_name: Integration tests (release)
#       runner_type: stress-tester
#       batches: 4
#       data: ${{ needs.ToDoList.outputs.data }}
#   IntegrationTestsFlakyCheck:
#     needs: [ToDoList, BuilderDebAsan]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/reusable_test.yml
#     with:
#       test_name: Integration tests flaky check (asan)
#       runner_type: stress-tester
#       data: ${{ needs.ToDoList.outputs.data }}
#############################################################################################
#################################### UNIT TESTS #############################################
#############################################################################################
  UnitTestsAsan:
    needs: [ToDoList, BuilderDebAsan]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: Unit tests (asan)
      runner_type: fuzzer-unit-tester
      data: ${{ needs.ToDoList.outputs.data }}
  UnitTestsReleaseClang:
    needs: [ToDoList, BuilderBinRelease]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: Unit tests (release)
      runner_type: fuzzer-unit-tester
      data: ${{ needs.ToDoList.outputs.data }}
#   UnitTestsTsan:
#     needs: [ToDoList, BuilderDebTsan]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/reusable_test.yml
#     with:
#       test_name: Unit tests (tsan)
#       runner_type: fuzzer-unit-tester
#       data: ${{ needs.ToDoList.outputs.data }}
#   UnitTestsMsan:
#     needs: [ToDoList, BuilderDebMsan]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/reusable_test.yml
#     with:
#       test_name: Unit tests (msan)
#       runner_type: fuzzer-unit-tester
#       data: ${{ needs.ToDoList.outputs.data }}
#   UnitTestsUBsan:
#     needs: [ToDoList, BuilderDebUBsan]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/reusable_test.yml
#     with:
#       test_name: Unit tests (ubsan)
#       runner_type: fuzzer-unit-tester
#       data: ${{ needs.ToDoList.outputs.data }}
#############################################################################################
#################################### PERFORMANCE TESTS ######################################
#############################################################################################
# FIXME: perf jobs always run but then can be exited if label performance-pr is not set
#        some logic should be added to ci script to skip them w/o starting a runner
  PerformanceComparisonX86:
    needs: [ToDoList, BuilderDebRelease]
    if: ${{ !failure() && !cancelled() && contains( github.event.pull_request.labels.*.name, 'My Label') }}
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: Performance Comparison
      runner_type: stress-tester
      data: ${{ needs.ToDoList.outputs.data }}
  PerformanceComparisonAarch:
    needs: [ToDoList, BuilderDebAarch64]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: Performance Comparison Aarch64
      runner_type: func-tester-aarch64
      data: ${{ needs.ToDoList.outputs.data }}
##############################################################################################
###################################### SQLANCER FUZZERS ######################################
##############################################################################################
  SQLancerTestRelease:
    needs: [ToDoList, BuilderDebRelease]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: SQLancer (release)
      runner_type: fuzzer-unit-tester
      data: ${{ needs.ToDoList.outputs.data }}
  SQLancerTestDebug:
    needs: [ToDoList, BuilderDebDebug]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: SQLancer (debug)
      runner_type: fuzzer-unit-tester
      data: ${{ needs.ToDoList.outputs.data }}
  FinishCheck:
    needs:
      - BuilderReport
      - BuilderSpecialReport
      - DocsCheck
      - FastTest
      # - FunctionalStatelessTestDebug
      # - FunctionalStatelessTestRelease
      # - FunctionalStatelessTestReleaseDatabaseReplicated
      # - FunctionalStatelessTestReleaseWideParts
      # - FunctionalStatelessTestReleaseAnalyzer
      # - FunctionalStatelessTestAarch64
      # - FunctionalStatelessTestAsan
      # - FunctionalStatelessTestTsan
      # - FunctionalStatelessTestMsan
      # - FunctionalStatelessTestUBsan
      # - FunctionalStatefulTestDebug
      # - FunctionalStatefulTestRelease
      # - FunctionalStatefulTestAarch64
      # - FunctionalStatefulTestAsan
      # - FunctionalStatefulTestTsan
      # - FunctionalStatefulTestMsan
      # - FunctionalStatefulTestUBsan
      - FunctionalStatelessTestReleaseS3
      - FunctionalStatelessTestS3Debug
      - FunctionalStatelessTestS3Tsan
      # - FunctionalStatefulTestReleaseParallelReplicas
      # - FunctionalStatefulTestAsanParallelReplicas
      # - FunctionalStatefulTestTsanParallelReplicas
      # - FunctionalStatefulTestMsanParallelReplicas
      # - FunctionalStatefulTestUBsanParallelReplicas
      # - FunctionalStatefulTestDebugParallelReplicas
      # - StressTestDebug
      - StressTestAsan
      - StressTestTsan
      # - StressTestMsan
      # - StressTestUBsan
      # - UpgradeCheckAsan
      # - UpgradeCheckTsan
      - UpgradeCheckMsan
      - UpgradeCheckDebug
      # - ASTFuzzerTestDebug
      # - ASTFuzzerTestAsan
      # - ASTFuzzerTestTsan
      # - ASTFuzzerTestMSan
      - ASTFuzzerTestUBSan
      - IntegrationTestsAsan
      - IntegrationTestsAnalyzerAsan
      # - IntegrationTestsTsan
      # - IntegrationTestsRelease
      # - IntegrationTestsFlakyCheck
      - PerformanceComparisonX86
      - PerformanceComparisonAarch
      - UnitTestsAsan
      # - UnitTestsTsan
      # - UnitTestsMsan
      # - UnitTestsUBsan
      - UnitTestsReleaseClang
      - CompatibilityCheckX86
      - CompatibilityCheckAarch64
      - SQLancerTestRelease
      - SQLancerTestDebug
    runs-on: [self-hosted, style-checker]
    steps:
      - name: Check out repository code
        uses: ClickHouse/checkout@v1
      - name: Finish label
        run: |
          cd "$GITHUB_WORKSPACE/tests/ci"
          python3 finish_check.py
          python3 merge_pr.py --check-approved
##############################################################################################
############################ SQLLOGIC TEST ###################################################
##############################################################################################
  SQLLogicTestRelease:
    needs: [ToDoList, BuilderDebRelease]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: Sqllogic test (release)
      runner_type: func-tester
      data: ${{ needs.ToDoList.outputs.data }}
##############################################################################################
##################################### SQL TEST ###############################################
##############################################################################################
  SQLTest:
    needs: [ToDoList, BuilderDebRelease]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_test.yml
    with:
      test_name: SQLTest
      runner_type: fuzzer-unit-tester
      data: ${{ needs.ToDoList.outputs.data }}
# #############################################################################################
# ###################################### NOT IN FINISH ########################################
# #############################################################################################
# ###################################### JEPSEN TESTS #########################################
# #############################################################################################
#   Jepsen:
#     # This is special test NOT INCLUDED in FinishCheck
#     # When it's skipped, all dependent tasks will be skipped too.
#     # DO NOT add it there
#     if: contains(github.event.pull_request.labels.*.name, 'jepsen-test')
#     needs: [ToDoList, BuilderBinRelease]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/jepsen.yml
# #############################################################################################
# ####################################### libFuzzer ###########################################
# #############################################################################################
#   libFuzzer:
#     if: contains(github.event.pull_request.labels.*.name, 'libFuzzer')
#     needs: [StyleCheck]
#     if: ${{ !failure() && !cancelled() }}
#     uses: ./.github/workflows/libfuzzer.yml
